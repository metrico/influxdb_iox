-- Test Setup: OneMeasurementFourChunksWithDuplicatesParquetOnly
-- SQL: select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Sorting
+--------------------------------+-------+---------+----------+----------+------+
| time                           | state | city    | min_temp | max_temp | area |
+--------------------------------+-------+---------+----------+----------+------+
| 1970-01-01T00:00:00.000000050Z | MA    | Boston  | 70.4     |          |      |
| 1970-01-01T00:00:00.000000150Z | MA    | Bedford | 71.59    | 78.75    | 742  |
| 1970-01-01T00:00:00.000000250Z | MA    | Andover |          | 69.2     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Boston  | 65.4     | 75.4     |      |
| 1970-01-01T00:00:00.000000250Z | MA    | Reading | 53.4     |          |      |
| 1970-01-01T00:00:00.000000300Z | CA    | SF      | 79.0     | 87.2     | 500  |
| 1970-01-01T00:00:00.000000300Z | CA    | SJ      | 78.5     | 88.0     |      |
| 1970-01-01T00:00:00.000000350Z | CA    | SJ      | 75.5     | 84.08    |      |
| 1970-01-01T00:00:00.000000400Z | MA    | Bedford | 65.22    | 80.75    | 750  |
| 1970-01-01T00:00:00.000000400Z | MA    | Boston  | 65.4     | 82.67    |      |
| 1970-01-01T00:00:00.000000450Z | CA    | SJ      | 77.0     | 90.7     |      |
| 1970-01-01T00:00:00.000000500Z | CA    | SJ      | 69.5     | 88.2     |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Bedford |          | 88.75    | 742  |
| 1970-01-01T00:00:00.000000600Z | MA    | Boston  | 67.4     |          |      |
| 1970-01-01T00:00:00.000000600Z | MA    | Reading | 60.4     |          |      |
| 1970-01-01T00:00:00.000000650Z | CA    | SF      | 68.4     | 85.7     | 500  |
| 1970-01-01T00:00:00.000000650Z | CA    | SJ      | 69.5     | 89.2     |      |
| 1970-01-01T00:00:00.000000700Z | CA    | SJ      | 75.5     | 84.08    |      |
+--------------------------------+-------+---------+----------+----------+------+
-- SQL: explain select time, state, city, min_temp, max_temp, area from h2o order by time, state, city;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Sort: h2o.time ASC NULLS LAST, h2o.state ASC NULLS LAST, h2o.city ASC NULLS LAST    |
|    |   Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |     TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | SortPreservingMergeExec: [time@0 ASC NULLS LAST,state@1 ASC NULLS LAST,city@2 ASC NULLS LAST]    |
|    |   UnionExec    |
|    |     SortExec: expr=[time@0 ASC NULLS LAST,state@1 ASC NULLS LAST,city@2 ASC NULLS LAST]    |
|    |       ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet], [1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, projection=[time, state, city, min_temp, max_temp, area], output_ordering=[state@1 ASC, city@2 ASC, time@0 ASC]    |
|    |     SortExec: expr=[time@0 ASC NULLS LAST,state@1 ASC NULLS LAST,city@2 ASC NULLS LAST]    |
|    |       ProjectionExec: expr=[time@1 as time, state@2 as state, city@3 as city, min_temp@4 as min_temp, max_temp@5 as max_temp, area@6 as area]    |
|    |         DeduplicateExec: [state@2 ASC,city@3 ASC,time@1 ASC]    |
|    |           SortPreservingMergeExec: [state@2 ASC,city@3 ASC,time@1 ASC,__chunk_order@0 ASC]    |
|    |             ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[__chunk_order, time, state, city, min_temp, max_temp, area], output_ordering=[state@2 ASC, city@3 ASC, time@1 ASC, __chunk_order@0 ASC]    |
|    |    |
----------
-- SQL: EXPLAIN select time, state, city, min_temp, max_temp, area from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Projection: h2o.time, h2o.state, h2o.city, h2o.min_temp, h2o.max_temp, h2o.area    |
|    |   TableScan: h2o projection=[area, city, max_temp, min_temp, state, time]    |
| physical_plan    | UnionExec    |
|    |   ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet], [1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, projection=[time, state, city, min_temp, max_temp, area], output_ordering=[state@1 ASC, city@2 ASC, time@0 ASC]    |
|    |   ProjectionExec: expr=[time@1 as time, state@2 as state, city@3 as city, min_temp@4 as min_temp, max_temp@5 as max_temp, area@6 as area]    |
|    |     DeduplicateExec: [state@2 ASC,city@3 ASC,time@1 ASC]    |
|    |       SortPreservingMergeExec: [state@2 ASC,city@3 ASC,time@1 ASC,__chunk_order@0 ASC]    |
|    |         ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[__chunk_order, time, state, city, min_temp, max_temp, area], output_ordering=[state@2 ASC, city@3 ASC, time@1 ASC, __chunk_order@0 ASC]    |
|    |    |
----------
-- SQL: EXPLAIN select state as name from h2o UNION ALL select city as name from h2o;
-- Results After Normalizing UUIDs
----------
| plan_type    | plan    |
----------
| logical_plan    | Union    |
|    |   Projection: h2o.state AS name    |
|    |     TableScan: h2o projection=[state]    |
|    |   Projection: h2o.city AS name    |
|    |     TableScan: h2o projection=[city]    |
| physical_plan    | UnionExec    |
|    |   ProjectionExec: expr=[state@0 as name]    |
|    |     UnionExec    |
|    |       ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet], [1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, projection=[state], output_ordering=[state@0 ASC]    |
|    |       ProjectionExec: expr=[state@2 as state]    |
|    |         DeduplicateExec: [state@2 ASC,city@1 ASC,time@3 ASC]    |
|    |           SortPreservingMergeExec: [state@2 ASC,city@1 ASC,time@3 ASC,__chunk_order@0 ASC]    |
|    |             ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[__chunk_order, city, state, time], output_ordering=[state@2 ASC, city@1 ASC, time@3 ASC, __chunk_order@0 ASC]    |
|    |   ProjectionExec: expr=[city@0 as name]    |
|    |     UnionExec    |
|    |       ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet], [1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, projection=[city]    |
|    |       ProjectionExec: expr=[city@1 as city]    |
|    |         DeduplicateExec: [state@2 ASC,city@1 ASC,time@3 ASC]    |
|    |           SortPreservingMergeExec: [state@2 ASC,city@1 ASC,time@3 ASC,__chunk_order@0 ASC]    |
|    |             ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[__chunk_order, city, state, time], output_ordering=[state@2 ASC, city@1 ASC, time@3 ASC, __chunk_order@0 ASC]    |
|    |    |
----------
-- SQL: select count(*) from h2o;
+-----------------+
| COUNT(UInt8(1)) |
+-----------------+
| 18              |
+-----------------+
-- SQL: EXPLAIN ANALYZE SELECT * from h2o where state = 'MA'
-- Results After Normalizing UUIDs
-- Results After Normalizing Metrics
----------
| plan_type    | plan    |
----------
| Plan with Metrics    | UnionExec, metrics=[elapsed_compute=1.234ms, output_rows=10]    |
|    |   CoalesceBatchesExec: target_batch_size=8192, metrics=[elapsed_compute=1.234ms, output_rows=5]    |
|    |     FilterExec: state@4 = MA, metrics=[elapsed_compute=1.234ms, output_rows=5]    |
|    |       ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000000.parquet], [1/1/1/00000000-0000-0000-0000-000000000001.parquet]]}, projection=[area, city, max_temp, min_temp, state, time], output_ordering=[state@4 ASC, city@1 ASC, time@5 ASC], predicate=state@4 = MA, pruning_predicate=state_min@0 <= MA AND MA <= state_max@1, metrics=[bytes_scanned=1683, elapsed_compute=1.234ms, file_open_errors=0, file_scan_errors=0, num_predicate_creation_errors=0, output_rows=5, page_index_eval_time=1.234ms, page_index_rows_filtered=0, predicate_evaluation_errors=0, pushdown_eval_time=1.234ms, pushdown_rows_filtered=5, row_groups_pruned=0, time_elapsed_opening=1.234ms, time_elapsed_processing=1.234ms, time_elapsed_scanning_total=1.234ms, time_elapsed_scanning_until_data=1.234ms]    |
|    |   ProjectionExec: expr=[area@1 as area, city@2 as city, max_temp@3 as max_temp, min_temp@4 as min_temp, state@5 as state, time@6 as time], metrics=[elapsed_compute=1.234ms, output_rows=5]    |
|    |     DeduplicateExec: [state@5 ASC,city@2 ASC,time@6 ASC], metrics=[elapsed_compute=1.234ms, num_dupes=2, output_rows=5]    |
|    |       SortPreservingMergeExec: [state@5 ASC,city@2 ASC,time@6 ASC,__chunk_order@0 ASC], metrics=[elapsed_compute=1.234ms, output_rows=7]    |
|    |         CoalesceBatchesExec: target_batch_size=8192, metrics=[elapsed_compute=1.234ms, output_rows=7]    |
|    |           FilterExec: state@5 = MA, metrics=[elapsed_compute=1.234ms, output_rows=7]    |
|    |             ParquetExec: file_groups={2 groups: [[1/1/1/00000000-0000-0000-0000-000000000002.parquet], [1/1/1/00000000-0000-0000-0000-000000000003.parquet]]}, projection=[__chunk_order, area, city, max_temp, min_temp, state, time], output_ordering=[state@5 ASC, city@2 ASC, time@6 ASC, __chunk_order@0 ASC], predicate=state@4 = MA, pruning_predicate=state_min@0 <= MA AND MA <= state_max@1, metrics=[bytes_scanned=1532, elapsed_compute=1.234ms, file_open_errors=0, file_scan_errors=0, num_predicate_creation_errors=0, output_rows=7, page_index_eval_time=1.234ms, page_index_rows_filtered=0, predicate_evaluation_errors=0, pushdown_eval_time=1.234ms, pushdown_rows_filtered=3, row_groups_pruned=0, time_elapsed_opening=1.234ms, time_elapsed_processing=1.234ms, time_elapsed_scanning_total=1.234ms, time_elapsed_scanning_until_data=1.234ms]    |
|    |    |
----------